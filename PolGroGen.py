{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import warnings\n",
    "\n",
    "with warnings.catch_warnings():\n",
    "    warnings.filterwarnings(\"ignore\",category=DeprecationWarning)\n",
    "    import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number of repeats: 5\n",
      "Enter input gro file: hth\n",
      "Enter X Y Z repeat distances in nanometers separated by a space: 5 5 5\n"
     ]
    }
   ],
   "source": [
    "#INPUTS\n",
    "repeats = input(\"Enter number of repeats: \")\n",
    "grofile = input(\"Enter input gro file: \")\n",
    "outfile = \"nmer_chain.gro\"\n",
    "inputs = input(\"Enter X Y Z repeat distances in nanometers separated by a space: \").split()\n",
    "try:\n",
    "    X, Y, Z = map(float, inputs) \n",
    "except ValueError:\n",
    "    print(\"Please enter valid numbers.\")\n",
    "    exit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#####Chain is stitched together from left to right fashion, tied together via terminal H atoms\n",
    "#####       H-Termer-nonmer-Initmer-H \n",
    "#####       <------ <------ <------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "def generate_polymer_gro(grofile, outfile, repeats, X, Y, Z):\n",
    "    # Read the .gro file\n",
    "    with open(grofile, \"r\") as gro:\n",
    "        allines = gro.readlines()\n",
    "    gro.close()\n",
    "\n",
    "    # Parse the .gro file into a DataFrame\n",
    "    grodirective = [line.split() for line in allines]\n",
    "    grodirective_df = pd.DataFrame(grodirective[2:-1])  # Skip header lines and footer line\n",
    "\n",
    "    # Initialize chain\n",
    "    initmer = grodirective_df.iloc[:-1]\n",
    "    nonmer = grodirective_df.iloc[1:-1]  # Split propagators\n",
    "\n",
    "    newnonmer = nonmer.copy()\n",
    "    polymer = initmer.copy()\n",
    "\n",
    "    # Generate polymer chains based on repeats\n",
    "    for i in range(1, repeats - 1):\n",
    "        newnonmer.loc[:, 3] = nonmer.loc[:, 3].astype(float) + X * i\n",
    "        newnonmer.loc[:, 4] = nonmer.loc[:, 4].astype(float) + Y * i\n",
    "        newnonmer.loc[:, 5] = nonmer.loc[:, 5].astype(float) + Z * i\n",
    "        polymer = pd.concat([polymer, newnonmer.astype(str)], ignore_index=False)\n",
    "\n",
    "    polymer.iloc[:, 3:6] = polymer.iloc[:, 3:6].astype(float)\n",
    "\n",
    "    # Process terminating fragment\n",
    "    termer = grodirective_df.iloc[1:]  # Terminating fragment\n",
    "    termer.iloc[:, 3:6] = termer.iloc[:, 3:6].astype(float)\n",
    "    termernew = termer.copy()\n",
    "    termernew.loc[:, 3] = termer.loc[:, 3] + X * (repeats - 1)\n",
    "    termernew.loc[:, 4] = termer.loc[:, 4] + Y * (repeats - 1)\n",
    "    termernew.loc[:, 5] = termer.loc[:, 5] + Z * (repeats - 1)\n",
    "\n",
    "    polymer = pd.concat([polymer, termernew], ignore_index=True)\n",
    "    polymer.iloc[:, 2] = pd.DataFrame([range(1, polymer.shape[0] + 1)]).T  # Fix atom order\n",
    "    polymer.iloc[:, 3:6] = polymer.iloc[:, 3:6].astype(float)\n",
    "\n",
    "    # Write output to .gro file\n",
    "    with open(outfile, 'w+') as grofile:\n",
    "        print('polymer gro file generated by polyGROgen | ChamikaraK', file=grofile)\n",
    "        print(f'  {polymer.shape[0]}', file=grofile)\n",
    "        for i in range(polymer.shape[0]):\n",
    "            coord_string = \"{}{}{}\".format(format(polymer.iloc[i, 3], \"8.3f\"),\n",
    "                                           format(polymer.iloc[i, 4], \"8.3f\"),\n",
    "                                           format(polymer.iloc[i, 5], \"8.3f\"))\n",
    "            site_string = \"{0:>8s}{1:>7s}{2:>5d}{3}\".format(polymer.iloc[i, 0],\n",
    "                                                            polymer.iloc[i, 1],\n",
    "                                                            polymer.iloc[i, 2],\n",
    "                                                            coord_string)\n",
    "            print(site_string, file=grofile)\n",
    "        print('   10   10   10', file=grofile)\n",
    "\n",
    "        \n",
    "\n",
    "generate_polymer_gro(grofile, outfile, repeats, X, Y, Z)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
